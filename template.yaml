AWSTemplateFormatVersion: "2010-09-09"
Description: Practice 1
Transform:
  - AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs14.x
    Timeout: 30
    MemorySize: 1024
    Tracing: Active
    TracingEnabled: true
    Environment:
      Variables:
        USERNAME: Jordi
        NODE_OPTIONS: --enable-source-maps
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:

  ###########################################
  #             Practice 2                  #
  ###########################################

  Dynamodb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-dynamodb-table'
      AttributeDefinitions:
        - AttributeName: id # Partition key
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaWriteDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaWriteDynamodbRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaWriteDynamodbPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt Dynamodb.Arn

  LambdaDeleteDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaDeleteDynamodbRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaDeleteDynamodbPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt Dynamodb.Arn

  LambdaGetDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaGetDynamodbRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                lambda.amazonaws.com
            Action:
              sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LambdaGetDynamodbPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt Dynamodb.Arn

  PutLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-put-dynamodb-lambda'
      Handler: put.handler
      CodeUri: dist/practice2
      Role: !GetAtt LambdaWriteDynamodbRole.Arn

  DeleteLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-delete-dynamodb-lambda'
      Handler: delete.handler
      CodeUri: dist/practice2
      Role: !GetAtt LambdaDeleteDynamodbRole.Arn

  GetLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-get-dynamodb-lambda'
      Handler: get.handler
      CodeUri: dist/practice2
      Role: !GetAtt LambdaGetDynamodbRole.Arn


###########################################
#             Practice 3                  #
###########################################

  Player1Lambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-player-1-lambda'
      CodeUri: dist/practice3
      Handler: player1.handler
      Runtime: nodejs12.x
      Policies:
        - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents

  Player2Lambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-player-2-lambda'
      CodeUri: dist/practice3
      Handler: player2.handler
      Runtime: nodejs12.x
      Policies:
        - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents

  # create the eventbus for ping pong
  pabloFraileEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${AWS::StackName}-event-bus"

  # Define the event pattern, specify the patterns, and the bus used
  Player1EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Player 1 Event Rule"
      EventBusName: !Sub "${AWS::StackName}-event-bus"
      EventPattern:
        source:
          - "player2"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "Player1Lambda"
              - "Arn"
          Id: "player1ServiceTarget"

  # Resource that grants permission to EventBridge to invoke the target.
  Player1LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "Player1Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "Player1EventRule"
          - "Arn"

  # Define the event pattern, specify the patterns, and the bus used
  Player2EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Player 2 Event Rule"
      EventBusName: !Sub "${AWS::StackName}-event-bus"
      EventPattern:
        source:
          - "player1"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "Player2Lambda"
              - "Arn"
          Id: "player1ServiceTarget"

  # Resource that grants permission to EventBridge to invoke the target.
  Player2LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "Player2Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "Player2EventRule"
          - "Arn"
